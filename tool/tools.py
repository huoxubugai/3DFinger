# 定义全局变量和方法
import numpy as np
import math

# 相机索引对应相机名称
camera_index_to_name = ['A', 'B', 'C', 'D', 'E', 'F']
# 6个相机的外参
camera_a_outer_para = np.mat([[0.574322111, 0.771054881, 0.275006333, 0.93847817],
                              [0.565423192, -0.130698104, -0.814379899, -0.36935905],
                              [-0.591988790, 0.623211341, -0.511035123, 4.78810628],
                              [0, 0, 0, 1]])
camera_b_outer_para = np.mat([[0.456023570, 0.727006744, 0.513326112, 1.72205846],
                              [-0.146061166, 0.630108915, -0.762645980, -0.30452329],
                              [-0.877900131, 0.272807532, 0.393531969, 5.53092307],
                              [0, 0, 0, 1]])
camera_c_outer_para = np.mat([[0.609183831, 0.528225460, 0.591500569, 1.59956459],
                              [-0.738350101, 0.649953779, 0.179997814, 0.5030131],
                              [-0.289368602, -0.546386263, 0.785956655, 5.58635091],
                              [0, 0, 0, 1]])
camera_d_outer_para = np.mat([[0.771746127, 0.478767298, 0.418556793, 0.955855425],
                              [-0.476877262, 0.000270229651, 0.878969854, 0.477556906],
                              [0.420708915, -0.877941799, 0.228521787, 4.61760675],
                              [0, 0, 0, 1]])
camera_e_outer_para = np.mat([[0.788882832, 0.555210653, 0.263448302, 0.71648894],
                              [0.159053746, -0.598545227, 0.785140445, 0.00777088],
                              [0.593604063, -0.577481378, -0.560490387, 4.30437514],
                              [0, 0, 0, 1]])
camera_f_outer_para = np.mat([[0.712321206, 0.689000523, 0.133704068, 1.13938413],
                              [0.694227260, -0.719684989, 0.0101009224, -0.28640104],
                              [0.103184351, 0.0856259076, -0.990969825, 4.49819911],
                              [0, 0, 0, 1]])

# 六个相机的内参
camera_a_inner_para = np.mat([[967.5377197, 0, 703.1273732, 0],
                              [0, 967.9393921, 351.0187561, 0],
                              [0, 0, 1, 0]])
camera_b_inner_para = np.mat([[963.2991943, 0, 589.8122291, 0],
                              [0, 962.7422485, 412.5244055, 0],
                              [0, 0, 1, 0]])
camera_c_inner_para = np.mat([[967.4086914, 0, 612.7826353, 0],
                              [0, 968.0758667, 451.7366286, 0],
                              [0, 0, 1, 0]])
camera_d_inner_para = np.mat([[961.0868530, 0, 692.7282436, 0],
                              [0, 960.6126708, 417.4375162, 0],
                              [0, 0, 1, 0]])
camera_e_inner_para = np.mat([[955.4882812, 0, 730.3056525, 0],
                              [0, 953.7589722, 451.5117967, 0],
                              [0, 0, 1, 0]])
camera_f_inner_para = np.mat([[962.0779419, 0, 595.2503222, 0],
                              [0, 961.0998535, 396.8389609, 0],
                              [0, 0, 1, 0]])

# 六个相机的投影矩阵为 投影矩阵=内参x外参
# 所有相机的投影矩阵放到一个三维矩阵里
all_camera_projection_mat = [
    [[1.39434783e+02, 1.18422163e+03, -9.32437833e+01, 4.27466162e+03],
     [3.39496212e+02, 9.22510264e+01, -9.67653298e+02, 1.32319794e+03],
     [-5.91988790e-01, 6.23211341e-01, -5.11035123e-01, 4.78810628e+00]],
    [[-7.85090956e+01, 8.61230229e+02, 7.26596598e+02, 4.92106359e+03],
     [-5.02774485e+02, 7.19172239e+02, -5.71889964e+02, 1.98846331e+03],
     [-8.77900131e-01, 2.72807532e-01, 3.93531969e-01, 5.53092307e+00]],
    [[4.12009678e+02, 1.76193887e+02, 1.05384338e+03, 4.97065152e+03],
     [-8.45497311e+02, 3.82381880e+02, 5.29296949e+02, 3.01051417e+03],
     [-2.89368602e-01, -5.46386263e-01, 7.85956655e-01, 5.58635091e+00]],
    [[1.03315200e+03, -1.48038125e+02, 5.60572927e+02, 4.11740670e+03],
     [-2.82474656e+02, -3.66226258e+02, 9.39743146e+02, 2.38630951e+03],
     [4.20708915e-01, -8.77941799e-01, 2.28521787e-01, 4.61760675e+00]],
    [[1.18728070e+03, 1.08759358e+02, -1.57607533e+02, 3.82810628e+03],
     [4.19718174e+02, -8.31607535e+02, 4.95766722e+02, 1.95088770e+03],
     [5.93604063e-01, -5.77481378e-01, -5.60490387e-01, 4.30437514e+00]],
    [[7.46729038e+02, 7.13841054e+02, -4.61241373e+02, 3.77373081e+03],
     [7.08169289e+02, -6.57709441e+02, -3.83547441e+02, 1.50980066e+03],
     [1.03184351e-01, 8.56259076e-02, -9.90969825e-01, 4.49819911e+00]]
]
camera_a_projection_mat = np.mat([[1.39434783e+02, 1.18422163e+03, -9.32437833e+01, 4.27466162e+03],
                                  [3.39496212e+02, 9.22510264e+01, -9.67653298e+02, 1.32319794e+03],
                                  [-5.91988790e-01, 6.23211341e-01, -5.11035123e-01, 4.78810628e+00]])

camera_b_projection_mat = np.mat([[-7.85090956e+01, 8.61230229e+02, 7.26596598e+02, 4.92106359e+03],
                                  [-5.02774485e+02, 7.19172239e+02, -5.71889964e+02, 1.98846331e+03],
                                  [-8.77900131e-01, 2.72807532e-01, 3.93531969e-01, 5.53092307e+00]])

camera_c_projection_mat = np.mat([[4.12009678e+02, 1.76193887e+02, 1.05384338e+03, 4.97065152e+03],
                                  [-8.45497311e+02, 3.82381880e+02, 5.29296949e+02, 3.01051417e+03],
                                  [-2.89368602e-01, -5.46386263e-01, 7.85956655e-01, 5.58635091e+00]])

camera_d_projection_mat = np.mat([[1.03315200e+03, -1.48038125e+02, 5.60572927e+02, 4.11740670e+03],
                                  [-2.82474656e+02, -3.66226258e+02, 9.39743146e+02, 2.38630951e+03],
                                  [4.20708915e-01, -8.77941799e-01, 2.28521787e-01, 4.61760675e+00]])

camera_e_projection_mat = np.mat([[1.18728070e+03, 1.08759358e+02, -1.57607533e+02, 3.82810628e+03],
                                  [4.19718174e+02, -8.31607535e+02, 4.95766722e+02, 1.95088770e+03],
                                  [5.93604063e-01, -5.77481378e-01, -5.60490387e-01, 4.30437514e+00]])

camera_f_projection_mat = np.mat([[7.46729038e+02, 7.13841054e+02, -4.61241373e+02, 3.77373081e+03],
                                  [7.08169289e+02, -6.57709441e+02, -3.83547441e+02, 1.50980066e+03],
                                  [1.03184351e-01, 8.56259076e-02, -9.90969825e-01, 4.49819911e+00]])


# 六个相机在世界坐标系下的坐标

# 六个相机组成的空间平面方程


# 打印数据点
def print_data_points(data_points):
    for li in data_points:
        print(li)


# 计算两个向量的夹角的余弦
# 公式为cos<a,b>=a.b/|a||b|. a.b=(x1x2+y1y2+z1z2) |a|=√(x1^2+y1^2+z1^2), |b|=√(x2^2+y2^2+z2^2).
def calculate_cosine(vector1, vector2):
    a = vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]
    b = math.sqrt(vector1[0] * vector1[0] + vector1[1] * vector1[1] + vector1[2] * vector1[2])
    c = math.sqrt(vector2[0] * vector2[0] + vector2[1] * vector2[1] + vector2[2] * vector2[2])
    res = a / (b * c)
    return res


# 计算两个向量的向量积
# AB=(x1,y1,z1)  CD=(x2,y2,z2) cross(AB,CD)=(y1*z2-y2z1,z1x2-z2x1,x1y2-x2y1)
def calculate_vector_product(vector1, vector2):
    vector_product = [vector1[1] * vector2[2] - vector1[2] * vector2[1],
                      vector1[2] * vector2[0] - vector1[0] * vector2[2],
                      vector1[0] * vector2[1] - vector1[1] * vector2[0]]
    return vector_product


# 点到空间平面的映射点
def get_mapping_point_in_camera_plane(point, camera_plane_para):
    a = camera_plane_para[0]
    b = camera_plane_para[1]
    c = camera_plane_para[2]
    d = camera_plane_para[3]
    x = point[0]
    y = point[1]
    z = point[2]
    temp = a * a + b * b + c * c
    x_ = ((b * b + c * c) * x - a * (b * y + c * z + d)) / temp
    y_ = ((a * a + c * c) * y - b * (a * x + c * z + d)) / temp
    z_ = ((a * a + b * b) * z - c * (a * x + b * y + d)) / temp
    point_ = [x_, y_, z_]
    return point_
